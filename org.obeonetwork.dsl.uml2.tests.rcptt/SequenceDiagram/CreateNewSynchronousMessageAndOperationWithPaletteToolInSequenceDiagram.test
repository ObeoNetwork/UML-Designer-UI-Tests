--- RCPTT testcase ---
Format-Version: 1.0
Contexts: _xUmjgA-GEeWqyPO4VW22gA,_MWdYgIBGEeS4X6G9cD21hw,_j5GvUAUgEeWu0eW6YYFvkg,_he-_gIBIEeS4X6G9cD21hw,_4eO8kBAeEeWa5c8q1ijOWg,_bKL_sH-PEeS4X6G9cD21hw,_X-rQgH-QEeS4X6G9cD21hw,_Bfja0OG2EeS3L8OLI5YuWw,_X4ZsIOG2EeS3L8OLI5YuWw
Element-Name: CreateNewSynchronousMessageAndOperationWithPaletteToolInSequenceDiagram
Element-Type: testcase
Element-Version: 3.0
External-Reference: 
Id: _QhkNAOGsEeS3L8OLI5YuWw
Runtime-Version: 2.1.0.201606221726
Save-Time: 8/3/16 11:58 AM
Testcase-Type: ecl
Verifications: _7rUV4OG2EeS3L8OLI5YuWw

------=_.description-216f885c-d591-38ce-8ea2-e4f8cb4d6ffa
Content-Type: text/plain
Entry-Name: .description

Create a New semantic element in Sequence Diagram: Synchronous message or operation

Test:
- with Palette tool : "Synchronous message and operation creation" create new element in Sequence diagram from Class1 to Classe2 Life lines.

Result:
- new element appears in diagram
- new element appears in model
------=_.description-216f885c-d591-38ce-8ea2-e4f8cb4d6ffa--
------=_.content-0a7243a0-75d3-3d5f-9791-539de0e5b7ac
Content-Type: text/ecl
Entry-Name: .content

 // Create a Synchronous Message From Class1 to Class2
with [get-editor "Test Sequence Diagram"] {
	with [get-palette] {
		with [get-palette-entry "Synchronous Message" -index 1] {
			mouse-move 84 16 button1 -height 23 -width 194
			mouse-press 84 16 button1 -height 23 -width 194
			mouse-release 84 16 button1 524288 -height 23 -width 194
			mouse-hover 84 16 -height 23 -width 194
			mouse-move 34 21 -height 23 -width 194
		}
	}
	with [get-diagram -index 1 | get-edit-part -name "Test Sequence Diagram"] {
		mouse-move 231 114 -height 500 -width 959
		with [get-edit-part -name "Class1 : Class1 [1]" | get-edit-part -name Class1 | get-edit-part
			-className SquareEditPart] {
			mouse-move 2 23 button1 -height 410 -width 10
			mouse-press 2 23 button1 -height 410 -width 10
			mouse-hover 2 23 -mask 524288 -height 410 -width 10
			mouse-release 2 23 button1 524288 -height 410 -width 10
		}
		mouse-move 513 110 -height 500 -width 959
		with [get-edit-part -name "Class2 : Class2 [1]" | get-edit-part -name Class2 | get-edit-part
			-className SquareEditPart] {
			mouse-hover 5 21 -height 410 -width 10
			mouse-move 5 21 button1 -height 410 -width 10
			mouse-press 5 21 button1 -height 410 -width 10
		}
	}
	with [get-diagram -index 1 | get-edit-part -name "Test Sequence Diagram"] {
		get-edit-part -name "Class2 : Class2 [1]" | get-edit-part -name Class2 | get-edit-part -name Operation_1
			| get-edit-part -className SquareEditPart | mouse-release 10 11 button1 524288 -height 30 -width 20
		mouse-move 936 109 -height 500 -width 956
	}
}
 // Check Arrow from Class1 to Class2
 with [get-editor "Test Sequence Diagram" | get-diagram -index 1 | get-edit-part -name "Test Sequence Diagram"] {
 with [get-edit-part -name "Class2 : Class2 [1]" | get-edit-part -name Class2 | get-edit-part -name "Operation_1"] {
 with [get-target-connection 0] {
 get-property "element.ownedStyle.customFeatures" | equals "[]" | verify-true
 get-property "element.ownedStyle.lineStyle" | equals solid | verify-true
 get-property "element.ownedStyle.sourceArrow" | equals NoDecoration | verify-true
 get-property "element.ownedStyle.targetArrow" | equals InputArrow | verify-true
 get-property "element.ownedStyle.foldingStyle" | equals NONE | verify-true
 get-property "element.ownedStyle.size" | equals 2 | verify-true
 get-property "element.ownedStyle.routingStyle" | equals straight | verify-true
 //get-property "element.ownedStyle.beginLabelStyle" | equals null | verify-true
 //get-property "element.ownedStyle.endLabelStyle" | equals null | verify-true
 get-property "element.ownedStyle.centered" | equals None | verify-true
 get-property "getFigure().isVisible()" | equals true | verify-true
 }
 get-edit-part -className SquareEditPart | get-property "getFigure().isVisible()" | equals true | verify-true
 }
 }
 // Check operation execution
 with [get-editor "Test Sequence Diagram" | get-diagram -index 1 | get-edit-part -name "Test Sequence Diagram"
 | get-edit-part -name "Class2 : Class2 [1]" | get-edit-part -name Class2 | get-edit-part -name "Operation_1"] {
 get-edit-part -className SquareEditPart | get-property "getFigure().isVisible()" | equals true | verify-true
 }
 
 // Check Arrow from class2 to Class1
 with [get-editor "Test Sequence Diagram" | get-diagram -index 1 | get-edit-part -name "Test Sequence Diagram"] {
 with [get-edit-part -name "Class1 : Class1 [1]" | get-edit-part -name Class1 | get-target-connection 0] {
 get-property "element.ownedStyle.customFeatures" | equals "[]" | verify-true
 get-property "element.ownedStyle.lineStyle" | equals dash | verify-true
 get-property "element.ownedStyle.sourceArrow" | equals NoDecoration | verify-true
 get-property "element.ownedStyle.targetArrow" | equals InputArrow | verify-true
 get-property "element.ownedStyle.foldingStyle" | equals NONE | verify-true
 get-property "element.ownedStyle.size" | equals 2 | verify-true
 get-property "element.ownedStyle.routingStyle" | equals straight | verify-true
 //get-property "element.ownedStyle.beginLabelStyle" | equals null | verify-true
 //get-property "element.ownedStyle.endLabelStyle" | equals null | verify-true
 get-property "element.ownedStyle.centered" | equals None | verify-true
 get-property "getFigure().isVisible()" | equals true | verify-true
 }
 }
 // Check model
 with [get-editor "Test Sequence Diagram" | get-diagram -index 1 | get-edit-part -name "Test Sequence Diagram"] {
 get-edit-part -name "Class2 : Class2 [1]" | get-edit-part -name Class2 | get-edit-part -name "Operation_1"
 | get-target-connection 0 | get-property "element.target.name" | equals "Operation_1" | verify-true
 get-edit-part -name "Class1 : Class1 [1]" | get-edit-part -name Class1 | get-target-connection 0
 | get-property "element.target.name" | equals "Operation_1_reply" | verify-true
 with [get-edit-part -name "Class2 : Class2 [1]" | get-edit-part -name Class2 | get-edit-part -name "Operation_1"
 | get-target-connection 0] {
 get-property "source.element.target.name" | equals Class1 | verify-true
 get-property "target.element.target.name" | equals "Operation_1" | verify-true
 get-property "element.semanticElements.Message[0].name" | equals "Operation_1" | verify-true
 get-property "element.semanticElements.Message[0].messageSort" | equals synchCall | verify-true
 }
 with [get-edit-part -name "Class1 : Class1 [1]" | get-edit-part -name Class1 | get-target-connection 0] {
 get-property "source.element.target.name" | equals "Operation_1" | verify-true
 get-property "target.element.target.name" | equals Class1 | verify-true
 get-property "element.semanticElements.Message[0].name" | equals "Operation_1_reply" | verify-true
 get-property "element.semanticElements.Message[0].messageSort" | equals reply | verify-true
 }
 }
 
 // Create Synchronous message From Actor1 to Actor2
with [get-editor "Test Sequence Diagram"] {
	with [get-palette] {
		with [get-palette-entry "Synchronous Message"] {
			mouse-move 113 38 -height 39 -width 125
			mouse-hover 113 38 -height 39 -width 125
		}
		with [get-palette-entry "Synchronous Message" -index 1] {
			mouse-move 70 16 button1 -height 23 -width 194
			mouse-press 70 16 button1 -height 23 -width 194
			mouse-release 70 16 button1 524288 -height 23 -width 194
			mouse-hover 67 17 -height 23 -width 194
		}
	}
	with [get-diagram -index 1 | get-edit-part -name "Test Sequence Diagram"] {
		mouse-move 746 209 -height 500 -width 956
		with [get-edit-part -name "Actor1 : Actor1 [1]" | get-edit-part -name Actor1 | get-edit-part
			-className SquareEditPart] {
			mouse-move 3 119 button1 -height 410 -width 10
			mouse-press 3 119 button1 -height 410 -width 10
			mouse-hover 3 119 -mask 524288 -height 410 -width 10
			mouse-release 3 119 button1 524288 -height 410 -width 10
		}
		mouse-move 911 216 -height 500 -width 956
		with [get-edit-part -name "Actor2 : Actor2 [1]" | get-edit-part -name Actor2 | get-edit-part
			-className SquareEditPart] {
			mouse-move 5 125 button1 -height 410 -width 10
			mouse-press 5 125 button1 -height 410 -width 10
		}
	}
	with [get-diagram -index 1 | get-edit-part -name "Test Sequence Diagram"] {
		get-edit-part -name "Actor2 : Actor2 [1]" | get-edit-part -name Actor2 | get-edit-part -className SquareEditPart
			| mouse-hover 5 125 -mask 524288 -height 410 -width 10
		mouse-release 919 215 button1 524288 -height 500 -width 981
		mouse-move 1050 201 -height 500 -width 981
	}
	get-palette | get-palette-entry Actor -index 1 | mouse-move 94 0 -height 23 -width 194
}
 // Check diagram
  with [get-editor "Test Sequence Diagram" | get-diagram -index 1 | get-edit-part -name "Test Sequence Diagram"] {
 // Arrow from Actor1 to Actor2
 with [get-edit-part -name "Actor2 : Actor2 [1]" | get-edit-part -name Actor2 | get-edit-part -name "Message_2"
 | get-target-connection 0] {
 get-property "element.ownedStyle.customFeatures" | equals "[]" | verify-true
 get-property "element.ownedStyle.lineStyle" | equals solid | verify-true
 get-property "element.ownedStyle.sourceArrow" | equals NoDecoration | verify-true
 get-property "element.ownedStyle.targetArrow" | equals InputArrow | verify-true
 get-property "element.ownedStyle.foldingStyle" | equals NONE | verify-true
 get-property "element.ownedStyle.size" | equals 2 | verify-true
 get-property "element.ownedStyle.routingStyle" | equals straight | verify-true
 //get-property "element.ownedStyle.beginLabelStyle" | equals null | verify-true
 //get-property "element.ownedStyle.endLabelStyle" | equals null | verify-true
 get-property "element.ownedStyle.centered" | equals None | verify-true
 }
 
 // Message execution
 get-property "getFigure().isVisible()" | equals true | verify-true
 get-edit-part -name "Actor2 : Actor2 [1]" | get-edit-part -name Actor2 | get-edit-part -name "Message_2"
 | get-edit-part -name "Message_2" | get-property "getFigure().getText()" | equals "Message_2" | verify-true
 
 // Arrow from Actor2 to Actor1
 with [get-edit-part -name "Actor1 : Actor1 [1]" | get-edit-part -name Actor1 | get-target-connection 0] {
 //get-edit-part -className "" | get-property "getFigure().getText()" | equals "Message_2_reply" | verify-true
 get-property "element.ownedStyle.customFeatures" | equals "[]" | verify-true
 get-property "element.ownedStyle.lineStyle" | equals dash | verify-true
 get-property "element.ownedStyle.sourceArrow" | equals NoDecoration | verify-true
 get-property "element.ownedStyle.targetArrow" | equals InputArrow | verify-true
 get-property "element.ownedStyle.foldingStyle" | equals NONE | verify-true
 get-property "element.ownedStyle.size" | equals 2 | verify-true
 get-property "element.ownedStyle.routingStyle" | equals straight | verify-true
 //get-property "element.ownedStyle.beginLabelStyle" | equals null | verify-true
 //get-property "element.ownedStyle.endLabelStyle" | equals null | verify-true
 get-property "element.ownedStyle.centered" | equals None | verify-true
 }
 
 // Check Model
 // Arrow from Actor1 to Actor2
 with [get-edit-part -name "Actor2 : Actor2 [1]" | get-edit-part -name Actor2 | get-edit-part -name "Message_2"
 | get-target-connection 0] {
 get-property "element.semanticElements.Message[0].name" | equals "Message_2" | verify-true
 get-property "element.semanticElements.Message[0].messageSort" | equals synchCall | verify-true
 get-property "element.sourceNode.name" | equals Actor1 | verify-true
 get-property "element.targetNode.name" | equals "Message_2" | verify-true
 }
 // Arrow from Actor2 to Actor1
 with [get-edit-part -name "Actor1 : Actor1 [1]" | get-edit-part -name Actor1 | get-target-connection 0] {
 get-property "element.semanticElements.Message[0].name" | equals "Message_2_reply" | verify-true
 get-property "element.semanticElements.Message[0].messageSort" | equals reply | verify-true
 get-property "element.sourceNode.name" | equals "Message_2" | verify-true
 get-property "element.targetNode.name" | equals Actor1 | verify-true
 }
 }


------=_.content-0a7243a0-75d3-3d5f-9791-539de0e5b7ac--
